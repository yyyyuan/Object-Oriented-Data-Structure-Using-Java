package tokenring;


/**
 * This is an abstract class representing a {@link Workstation workstation}
 * in a {@link TokenRing token ring} network. It supplies the connection to
 * the {@link Engine} as well as some useful delegate methods for recording
 * information about the simulation. Subclasses must implement the abstract
 * methods defined below as well as any methods dictated by {@link Simulatable}
 * and {@link Comparable}. Implementations should also override the
 * {@link Object#equals(Object)} method.
 * 
 * @author tim
 *
 */
public abstract class Workstation 
		implements Simulatable, 
				   Comparable<Workstation> {
	
	/**
	 * This is used to generate unique ids for each workstation.
	 */
	private static int IDS = 0;
	
	/**
	 * This is the id of the workstation.
	 */
	protected int id = -1;
	
	/**
	 * The {@link Engine} that is running the simulation. Every workstation
	 * object is associated with an engine so it can record useful information
	 * about the simulation.
	 */
	private Engine engine;
	
	/**
	 * The constructor for a workstation. It assigns a new id to the
	 * newly constructed {@link Workstation}. Make sure to invoke the
	 * constructor in the subclasses or you will not get a proper id
	 * assigned.
	 */
	protected Workstation() {
		this.id  = IDS++;
	}
	
	/**
	 * Sets the {@link Engine} this workstation belongs to.
	 * 
	 * @param engine the engine
	 */
	public void setEngine(Engine engine) {
		this.engine = engine;
	}
	
	/**
	 * A delegate method to increment the number of messages sent.	
	 */
	protected void incMsgSent() {
		engine.incMsgSent();
	}

	/**
	 * A delegate method to increment the number of messages received.
	 */
	protected void incMsgRcvd() {
		engine.incMsgRcvd();
	}

	/**
	 * A delegate method to increment the number of messages delivered.
	 */
	protected void incMsgDelivered() {
		engine.incMsgDelivered();
	}
	
	/**
	 * Returns the ID of this workstation.
	 * 
	 * @return the ID
	 */
	public int getId() {
		return id;
	}

	/**
	 * Returns the {@link NetworkInterface} attached to this workstation.
	 * 
	 * @return the network interface
	 */
	public abstract NetworkInterface getNIC();
	
	/**
	 * Queues a message in this workstation to be sent to another
	 * workstation in the token ring network. Messages are
	 * randomly generated by the {@link Engine#simulate(int)} method
	 * and assigned to a workstation by invoking this method. 
	 * 
	 * @param m a message
	 */
	public abstract void sendMessage(Message m);
}
